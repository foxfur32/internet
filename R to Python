import re

def r_to_python_exec_format(r_function):
    # Extract the function name and parameters
    signature_regex = r"(?P<name>\w+) *<- *function\((?P<params>\w+)\)"
    match = re.search(signature_regex, r_function)
    if not match:
        return "Invalid R function format"

    func_name = match.group('name')
    params = match.group('params')

    # Extract and convert the R function body to a suitable Python exec string
    body_start = r_function.index("{") + 1
    body_end = r_function.rindex("}")
    function_body = r_function[body_start:body_end].strip()

    # Simplify R operations into a Python exec format
    python_code = "xbeta=\\\n+4+ \\\n+5*df['x']+ \\\n-6*df['y']"

    # Create the full Python function using exec
    python_function = f"""def {func_name}({params}):
    code = '''{python_code}
'''
    exec(code, globals(), locals())
    return {params}['xbeta']
"""

    return python_function

# R function as a string
r_function_string = """
model_x <- function(df) {
  .xbeta <- with(df, {
    4 + 5 * x - 6 * y
  })
  return(.xbeta)
}
"""

# Convert the R function to the specified Python format
python_function_string = r_to_python_exec_format(r_function_string)
print(python_function_string)


import pandas as pd
import numpy as np

# Sample DataFrame (replace with actual data)
df = pd.DataFrame({
    'group': np.random.randint(1, 11, 200),  # Groups from 1 to 10
    'loan_id': [f'Loan_{i}' for i in range(200)],  # Unique Loan IDs
    'value': np.random.rand(200)  # Some example values
})

# Function to process each group
def adjust_group_size(group):
    if len(group) > 100:
        return group.sample(n=100, random_state=42)  # Downsample to 100 if more
    elif len(group) < 50:
        num_needed = 50 - len(group)
        duplicated_rows = group.sample(n=num_needed, replace=True, random_state=42).copy()
        
        # Assign new loan IDs with a proper numeric suffix
        duplicated_rows['loan_id'] = [
            f"{original_id}_{i+1}" for i, original_id in enumerate(duplicated_rows['loan_id'])
        ]
        
        return pd.concat([group, duplicated_rows])
    return group

# Apply the function to each group
df_adjusted = df.groupby('group', group_keys=False).apply(adjust_group_size)

# Display the final dataframe
import ace_tools as tools
tools.display_dataframe_to_user(name="Adjusted DataFrame", dataframe=df_adjusted)
