import re

def r_to_python_exec_format(r_function):
    # Extract the function name and parameters
    signature_regex = r"(?P<name>\w+) *<- *function\((?P<params>\w+)\)"
    match = re.search(signature_regex, r_function)
    if not match:
        return "Invalid R function format"

    func_name = match.group('name')
    params = match.group('params')

    # Extract and convert the R function body to a suitable Python exec string
    body_start = r_function.index("{") + 1
    body_end = r_function.rindex("}")
    function_body = r_function[body_start:body_end].strip()

    # Simplify R operations into a Python exec format
    python_code = "xbeta=\\\n+4+ \\\n+5*df['x']+ \\\n-6*df['y']"

    # Create the full Python function using exec
    python_function = f"""def {func_name}({params}):
    code = '''{python_code}
'''
    exec(code, globals(), locals())
    return {params}['xbeta']
"""

    return python_function

# R function as a string
r_function_string = """
model_x <- function(df) {
  .xbeta <- with(df, {
    4 + 5 * x - 6 * y
  })
  return(.xbeta)
}
"""

# Convert the R function to the specified Python format
python_function_string = r_to_python_exec_format(r_function_string)
print(python_function_string)
